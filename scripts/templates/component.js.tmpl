/**
 * GENERATED-CODE
 *
 * Beware don't edit `index.js` it was automatically generated with `npm run update`, edit `scripts/templates/component.js.tmpl` instead.
 */

import {
  BodyComponent
} from 'mjml-core'
import { registerDependencies } from 'mjml-validator'
import Image from 'mjml-image'
import widthParser from 'mjml-core/lib/helpers/widthParser'

import qs from 'querystring'
import memoize from 'lodash/memoize'
import min from 'lodash/min'
import toNumber from 'lodash/toNumber'
import includes from 'lodash/includes'

registerDependencies({
  // Tell the validator which tags are allowed as our component's parent
  'mj-hero': ['mj-chart'],
  'mj-column': ['mj-chart'],
  'mj-body': ['mj-chart'],
  // Tell the validator which tags are allowed as our component's children
  'mj-chart': []
})

const imageChartsParameters = /*imageChartsParameters*/;

const strToRegExp = memoize((regexp) => {
  const [__, pattern, flags] = /\/(.*)\/(.*)/.exec(regexp); // eslint-disable-line no-unused-vars
  return new RegExp(pattern, flags);
})

function buildURL (getAttribute) {

  function buildQuery () {
    return imageChartsParameters.reduce((query, attr) => {
      const val = getAttribute(attr.name);

      if(attr.required && val === undefined){
        throw new Error(`${attr.name} is required. Examples values ${attr.examples.join(', ')}`);
      }

      if (val === undefined) {
        return query;
      }

      if (attr.pattern && !strToRegExp(attr.pattern).test(val)) {
        throw new Error(`"${val}" is an invalid value for ${attr.name}. Examples: ${attr.examples.join(', ')}`);
      }

      if (attr.enum && !includes(attr.enum, val)) {
        throw new Error(`"${val}" is not an valid value for ${attr.name}. Valid values are: ${JSON.stringify(attr.enum)}`);
      }

      query[attr.name] = val;
      return query;
    }, {});
  }

  return `/*documentation_url*/?${qs.stringify(buildQuery())}`;
}

export default class MjChart extends BodyComponent {
  // Tell the parser that our component won't contain other mjml tags
  static endingTag = true

  // Tells the validator which attributes are allowed for mj-chart
  static allowedAttributes = /*allowedAttributes*/;

  // What the name suggests. Fallback value for this.getAttribute('attribute-name').
  static defaultAttributes = /*defaultAttributes*/;

  // Tells the validator which attributes are allowed for mj-chart
  static imageAttributes = /*imageAttributes*/;

  /*
    Render is the only required function in a component.
    It must return an html string.
  */
  render () {
    const getAttribute = this.getAttribute.bind(this);
    const [width, height] = getAttribute('chs').split('x').map(toNumber);

    const attributes = MjChart.imageAttributes.reduce((attrs, {name}) => {
      attrs[name] = getAttribute(name);
      return attrs;
    }, {
      src: buildURL(getAttribute),
      width: `${width}px`
    });

    return this.renderMJML(`<mj-image ${this.htmlAttributes(attributes)} />`);
  }
}
