/**
 * GENERATED-CODE
 *
 * Beware don't edit `index.js` it was automatically generated with `npm run update`, edit `scripts/templates/component.js.tmpl` instead.
 */

import {
  BodyComponent
} from 'mjml-core'
import Image from 'mjml-image'
import widthParser from 'mjml-core/lib/helpers/widthParser'

import qs from 'querystring'
import memoize from 'lodash/memoize'
import min from 'lodash/min'
import toNumber from 'lodash/toNumber'
import includes from 'lodash/includes'

const imageChartsParameters = /*imageChartsParameters*/;

const strToRegExp = memoize((regexp) => {
  const [__, pattern, flags] = /\/(.*)\/(.*)/.exec(regexp); // eslint-disable-line no-unused-vars
  return new RegExp(pattern, flags);
})

function buildURL (getAttribute) {

  function buildQuery () {
    return imageChartsParameters.reduce((query, attr) => {
      const val = getAttribute(attr.name);

      if(attr.required && val === undefined){
        throw new Error(`${attr.name} is required. Examples values ${attr.examples.join(', ')}`);
      }

      if (val === undefined) {
        return query;
      }

      if (attr.pattern && !strToRegExp(attr.pattern).test(val)) {
        throw new Error(`"${val}" is an invalid value for ${attr.name}. Examples: ${attr.examples.join(', ')}`);
      }

      if (attr.enum && !includes(attr.enum, val)) {
        throw new Error(`"${val}" is not an valid value for ${attr.name}. Valid values are: ${JSON.stringify(attr.enum)}`);
      }

      query[attr.name] = val;
      return query;
    }, {});
  }

  return `/*documentation_url*/?${qs.stringify(buildQuery())}`;
}

class Chart extends BodyComponent {
  static tagOmission = true;
  static endingTag = true;

  static allowedAttributes = /*allowedAttributes*/;

  static defaultAttributes = /*defaultAttributes*/;

  getContentWidth (chsWidth) {
    const parentWidth = this.getAttribute('parentWidth')
    const width = min([parseFloat(chsWidth), parseFloat(parentWidth)])
    return width;
  }

  getStyles() {
    const [_width, height] = this.getAttribute('chs').split('x').map(toNumber)
    const width = this.getContentWidth(_width);
    const fullWidth = this.getAttribute('full-width') === 'full-width'

    const { parsedWidth, unit } = widthParser(width)

    return {
      table: {
        'min-width': fullWidth ? '100%' : null,
        'max-width': fullWidth ? '100%' : null,
        width: fullWidth ? `${parsedWidth}${unit}` : null,
        'border-collapse': 'collapse',
        'border-spacing': '0px',
      },
      td: {
        width: fullWidth ? null : `${parsedWidth}${unit}`,
      },
      img: {
        border: this.getAttribute('border'),
        borderRadius: '',
        display: 'block',
        outline: 'none',
        textDecoration: 'none',
        'min-width': fullWidth ? '100%' : null,
        width: fullWidth ? `${parsedWidth}${unit}` : '100%',
        'max-width': fullWidth ? '100%' : null,
      }
    }
  }

  render () {

    const [width, height] = this.getAttribute('chs').split('x').map(toNumber)

    return `<image
      ${this.htmlAttributes({
        'width': this.getContentWidth(width),
        'src': buildURL(this.getAttribute.bind(this)),
        'padding': this.getAttribute('padding'),
        'align': this.getAttribute('align'),
        'alt': this.getAttribute('alt'),
        'border': this.getAttribute('border'),
        'border-radius': this.getAttribute('border-radius'),
        'title': this.getAttribute('title')
       })}
    />`;
  }
}

export default Chart
